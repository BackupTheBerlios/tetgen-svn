16  3  0  0

1      10      8      0 
2      10      6      4
3       0      6      4
4       0      8      0 
5      10      4      8 
6       0      4      8 
7      10     10      4
8       0     10      4 
9      10      0      4 
10      0      0      4 

11       7      2      4
12       1.5      2      4 
13       5     8      4

14  7 7 2
15  4 7 2
16  4 5 6

6  1

3  11 12 13  3
3  14 15 16  4

4  1 2 3 4  1
4  2 5 6 3  1
4  7 2 3 8  2
4  2 9 10 3  2

0
0

########
p:show_string(7,7,2,"A")
p:show_string(4,7,2,"B")
p:show_string(4,5,6,"C")
p:show_string(7,2,4,"P")
p:show_string(1.5,2,4,"Q")
p:show_string(5,8,4,"R")

      Tri-tri (14 15 16)-(11 12 13) (--+)
      Tri-tri (14 15 16)-(11 12 13) (++-)
      Tri-tri (14 15 16)-(11 12 13) (0-0) (-+)
      (tritri-00-++-)
  [0] ACROSSEDGE 2 3
  [0] ACROSSEDGE 1 3

// Check the correctness of this test. Insert the code here
    // (tritri-00-++-.smesh)
    if (types[0] != (int) tetgenmesh::ACROSSEDGE) {
      printf("  !! Wrong case.\n");
      horror++;
    }
    //<<<<<<<<<<<<< The first intersection 
    pa = T1[pos[0]];
    pb = T1[(pos[0] + 1) % 3];
    if (!(
        ((m.pmark(pa) == 16) && (m.pmark(pb) == 14)) ||
        ((m.pmark(pa) == 14) && (m.pmark(pb) == 16))
       )) {
      printf("  !! Wrong report\n");
      horror++;
    }
    if (pos[1] != 3) {
      printf("  !! Wrong report\n");
      horror++;
    }
    // >>>>>>>>>>>>>
    // <<<<<<<<<<<<< The second intersection
    if (types[1] != (int) tetgenmesh::ACROSSEDGE) {
      printf("  !! Wrong case.\n");
      horror++;
    }
    pa = T1[pos[2]];
    pb = T1[(pos[2] + 1) % 3];
    if (!(
        ((m.pmark(pa) == 15) && (m.pmark(pb) == 16)) ||
        ((m.pmark(pa) == 16) && (m.pmark(pb) == 15))
       )) {
      printf("  !! Wrong report\n");
      horror++;
    }
    if (pos[3] != 3) {
      printf("  !! Wrong report\n");
      horror++;
    }
    // >>>>>>>>>>>>>>
    if (horror == 0) {
      printf("  test passed.\n");
    } else {
      exit(1);
    }